# Why Cypress?

Selenium runs outside of the browser, but Cypress is executed in the same run

Cypress operates at the network layer by reading and altering web traffic on the fly. (Sub and spy)
Respond to your application's events in real time, while at the same time work outside of the browser for tasks that require a higher privilege
Cypress can deliver more consistent results than any other testing tool.
taking screenshots, recording videos,

it has native access to every single object. Your test code can access all the same objects that your application code can.

•	Stub the browser or your application's functions and force them to behave as needed in your test case.
•	Expose data stores (like in Redux) so you can programmatically alter the state of your application directly from your test code.
•	Test edge cases like 'empty views' by forcing your server to send empty responses.
•	Test how your application responds to errors on your server by modifying response status codes to be 500.
•	Modify DOM elements directly - like forcing hidden elements to be shown.
•	Use 3rd party plugins programmatically. Instead of fussing with complex UI widgets like multi selects, autocompletes, drop downs, tree views or calendars, you can call methods directly from your test code to control them.
•	Prevent Google Analytics from loading before any of your application code executes when testing.
•	Get synchronous notifications whenever your application transitions to a new page or when it begins to unload.
•	Control time by moving forward or backward so that timers or polls automatically fire without having to wait for the required time in your tests.
•	Add your own event listeners to respond to your application. You could update your application code to behave differently when under tests in Cypress. You can control WebSocket messages from within Cypress, conditionally load 3rd party scripts, or call functions directly on your application.

